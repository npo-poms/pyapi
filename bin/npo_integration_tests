#!/usr/bin/env python3
"""
 Integrations test
 See http://poms-test.omroep.nl/#/edit/WO_VPRO_1425989

"""
import argparse
import time
import re

import pyxb

from npoapi import Media
from npoapi import MediaBackend
from npoapi.xml import mediaupdate
from npoapi.xml import poms
from npoapi.xml import api

latency = 60 * 60 # one hour

aparser = argparse.ArgumentParser(add_help=False)
aparser.add_argument('-e', "--env", type=str, default=None, choices={"test", "prod", "dev", "localhost"})
aparser.add_argument('-d', "--debug", action='store_true', help="Switch on debug logging")
args= aparser.parse_args()

backend = MediaBackend().env(args.env).debug(args.debug).configured_login(read_environment=True)
mediaapi = Media().env(args.env).debug(args.debug).configured_login(read_environment=True)


time_str = str(time.time())

def create_clip():
    program = mediaupdate.program(type="CLIP", avType="MIXED")
    program.title.append(mediaupdate.titleUpdateType("hoi " + time_str, type="MAIN"))
    program.crid.append("crid://pyapi/clip/1")
    program.broadcaster.append("VPRO")
    program.segments = pyxb.BIND()
    program.segments.append(create_segment(1))
    program.images = pyxb.BIND()
    image = mediaupdate.image(type="PICTURE", title="Plaatje van clip " + time_str)
    image.imageLocation = "https://placeholdit.imgix.net/~text?txtsize=15&txt=image2&w=120&h=120"
    program.images.append(image)
    return program

def create_segment(nr, ref=None):
    segment = mediaupdate.segment(avType="MIXED")
    segment.title.append(mediaupdate.titleUpdateType("hoi (" + str(nr) + ") " + time_str, type="MAIN"))
    segment.crid.append("crid://pyapi/segment/" + str(nr))
    segment.broadcaster.append("VPRO")
    segment.start = 'PT10S'
    segment.images = pyxb.BIND()
    if ref:
        segment.midRef = ref
    image = mediaupdate.image(type="PICTURE", title="Plaatje van segment "  + time_str)
    image.imageLocation = "https://placeholdit.imgix.net/~text?txtsize=17&txt=image2&w=120&h=120"
    segment.images.append(image)
    return segment


def post_clip():
    clip = create_clip()
    result = backend.post(clip)
    print(result)
    assert result == "crid://pyapi/clip/1"


def post_segment():
    segment = create_segment(2, "WO_VPRO_1425989")
    result = backend.post(segment)
    print(result)
    assert result == "crid://pyapi/segment/2"


def post_to_backend():
    post_clip()
    post_segment()


def check_on_backend():
    clip = backend.get("crid://pyapi/clip/1")
    assert clip
    clip = mediaupdate.CreateFromDocument(clip)
    # assert clip.mid == "WO_VPRO_1425989"
    print(clip.title[0].value())
    assert clip.title[0].value().endswith(time_str)


def check_frontend_media():
    form = api.mediaForm()
    form.searches = pyxb.BIND()
    form.searches.mediaIds = "crid://pyapi/clip/1"
    s = mediaapi.search(form, accept="application/xml")
    result = poms.CreateFromDocument(s)
    title = result.items.item[0].result.title[0].value()
    t = float(title.split()[-1])

    assert t > (time.time() - latency), "should be published in 10 minutes " + title + " < " + str(time.time())

def post_parkpost():
    xml = """<?xml version="1.0"?>
<NPO_gfxwrp>
  <ProductCode>2P0108MO_BLAUWBLO%s</ProductCode>
  <OrderCode>2P140801_EO___BLAUW_BL_MOR</OrderCode>
  <Broadcaster>EO</Broadcaster>
  <PromotedProgramProductCode>VPWON_1227699</PromotedProgramProductCode>
  <Referrer/>
  <MXF_Name>91345392</MXF_Name>
  <ProgramTitle>Blauw Bloed Extra: Prinses Irene - 75 jaar</ProgramTitle>
  <EpisodeTitle>Blauw Bloed Extra: Prinses Irene - 75 jaar</EpisodeTitle>
  <PromoType>P</PromoType>
  <TrailerTitle>Blauw Bloed Extra: Prinses Irene - 75 jaar</TrailerTitle>
  <SerieTitle>Blauw Bloed Extra: Prinses Irene - 75 jaar</SerieTitle>
  <FrameCount>750</FrameCount>
  <VideoFormat>HD</VideoFormat>
  <FirstTransmissionDate>2014-08-01T16:59:04+00:00</FirstTransmissionDate>
  <PlacingWindowStart>2014-07-31T06:00:00+02:00</PlacingWindowStart>
  <PlacingWindowEnd>2014-08-01T06:00:00+02:00</PlacingWindowEnd>
  <Files>
    <File Filename="2P0108MO_BLAUWBLO.ismv"/>
    <File Filename="2P0108MO_BLAUWBLO.ismc"/>
    <File Filename="2P0108MO_BLAUWBLO.ism"/>
  </Files>
</NPO_gfxwrp>
""" % time_str
    result = backend.parkpost(xml)
    print(result)
    assert re.match("Promo ProgramUpdate for .* has been processed",  result)



# TODO This is hard, because if you delete a crid, you can't create it again?!
def remove_clip():
    backend.delete_from("crid://pyapi/clip/1")


def remove_segment():
    backend.delete_from("crid://pyapi/segment/2")

post_to_backend()
post_parkpost()

time.sleep(5)
check_on_backend()
check_frontend_media()

# This doesn't work without the right credentials. How do we solve this for integration tests?
# MM: Credentials can be stored in ~/conf/creds.properties. So, the server running the tests just needs that file.


remove_clip()
remove_segment()






