#!/usr/bin/env python3
"""
 Integrations test
 See http://poms-test.omroep.nl/#/edit/<MID>

 These tests are done much more extensively with that java client.

"""
import argparse
import time

import pyxb

from npoapi import Media
from npoapi import MediaBackend
from npoapi.xml import api
from npoapi.xml import mediaupdate
from npoapi.xml import poms

latency = 60 * 60 # one hour

argument_parser = argparse.ArgumentParser(add_help=False)
argument_parser.add_argument('-e', "--env", type=str, default=None, choices={"test", "prod", "dev", "localhost"})
argument_parser.add_argument('-d', "--debug", action='store_true', help="Switch on debug logging")
args = argument_parser.parse_args()

backend = MediaBackend().env(args.env).debug(args.debug).configured_login(read_environment=True)
mediaapi = Media().env(args.env).debug(args.debug).configured_login(read_environment=True)

MID = "WO_VPRO_025057"

time_str = str(time.time())

def create_title():
    return "hoi " + time_str

def create_clip():
    program = mediaupdate.program(type="CLIP", avType="MIXED")
    title = create_title()
    program.title.append(mediaupdate.titleUpdateType(title, type="MAIN"))
    program.crid.append("crid://pyapi/clip/1")
    program.broadcaster.append("VPRO")
    program.segments = pyxb.BIND()
    program.segments.append(create_segment(1))
    program.images = pyxb.BIND()
    image = mediaupdate.image(type="PICTURE", title="Plaatje van clip " + time_str)
    image.imageLocation = "https://placeholdit.imgix.net/~text?txtsize=15&txt=image2&w=120&h=120"
    program.images.append(image)
    program.credits = pyxb.BIND()
    program.credits.append(mediaupdate.personUpdateType(role="EDITOR", givenName="Pietje", familyName="PuK"))
    return program

def create_segment(nr, ref=None):
    segment = mediaupdate.segment(avType="MIXED")
    segment.title.append(mediaupdate.titleUpdateType("hoi (" + str(nr) + ") " + time_str, type="MAIN"))
    segment.crid.append("crid://pyapi/segment/" + str(nr))
    segment.broadcaster.append("VPRO")
    segment.start = 'PT10S'
    segment.images = pyxb.BIND()
    if ref:
        segment.midRef = ref
    image = mediaupdate.image(type="PICTURE", title="Plaatje van segment "  + time_str)
    image.imageLocation = "https://placeholdit.imgix.net/~text?txtsize=17&txt=image2&w=120&h=120"
    segment.images.append(image)
    return segment


def post_clip():
    clip = create_clip()
    result = backend.post(clip)
    print(result + " " + create_title())
    assert result == "crid://pyapi/clip/1"


def post_segment():
    segment = create_segment(2, MID)
    result = backend.post(segment)
    print(result)
    assert result == "crid://pyapi/segment/2"


def post_to_backend():
    post_clip()
    post_segment()


def check_on_backend():
    clip = backend.get("crid://pyapi/clip/1")
    assert clip
    clip = mediaupdate.CreateFromDocument(clip)
    # assert clip.mid == "WO_VPRO_1425989"
    print(clip.title[0].value() + " ends with " + time_str)
    assert clip.title[0].value().endswith(time_str)


def check_frontend_media():
    form = api.mediaForm()
    form.searches = pyxb.BIND()
    form.searches.mediaIds = "crid://pyapi/clip/1"
    s = mediaapi.search(form, accept="application/xml")
    result = poms.CreateFromDocument(s)
    title = result.items.item[0].result.title[0].value()
    t = float(title.split()[-1])

    assert t > (time.time() - latency), "should be published in 10 minutes " + title + " < " + str(time.time())



# TODO This is hard, because if you delete a crid, you can't create it again?!
def remove_clip():
    backend.delete("crid://pyapi/clip/1")


def remove_segment():
    backend.delete("crid://pyapi/segment/2")

post_to_backend()

print("Posted to backend,  now waiting before checking on backend api")
time.sleep(70)
check_on_backend()
print("Checking on frontend API")

check_frontend_media()

# This doesn't work without the right credentials. How do we solve this for integration tests?
# MM: Credentials can be stored in ~/conf/creds.properties. So, the server running the tests just needs that file.


remove_clip()
remove_segment()






