#!/usr/bin/env python3
"""
  Simple client to get an object from the NPO Backend API media endpoint
"""
from npoapi import MediaBackend
from npoapi.xml import media_search
from xml.dom.minidom import parseString

client = MediaBackend().command_line_client(description="Set an media object from the NPO Backend API")
group = client.argument_parser.add_mutually_exclusive_group(required=True)

group.add_argument('xml', type=str, nargs='?', help='The xml to post')
group.add_argument('mid', type=str, nargs='?', help='The mid to get or delete')

client.add_argument('-S', '--search', action='store_true',
                   help="""Force that the xml is interpreted as a search""")
client.add_argument('-W', '--writable', action='store_true',
                    help="""Only writable items are searched""")
client.add_argument('-D', '--delete', action='store_true',
                   help="""The mid will be deleted""")

client.add_argument('--raw', action='store_true', help="""The XML will not be parsed first. Implies that the argument is XML not a MID""")

client.add_argument('--validate', action='store_true', help="""Use validateInput argument, when posting XML's.""")

client.add_argument('-p', '--process', type=str,
                    help="""python code to postprocess. E.g. update.midRef ='POMS_S_VPRO_168360'""""")

args = client.parse_args()
mid = None

if args.search:
    print(client.find(args.xml[0], writeable=args.writable))
else:
    xmlString = client.data_or_from_file(args.xml)
    if args.raw:
        xml = args.xml
    else :
        try:
            xml = parseString(xmlString)
        except Exception as e:
            xml = None
            mid = args.xml

    if xml and not type(xml) == str and xml.childNodes[0].nodeName == "NPO_gfxwrp":
        if args.delete or args.search:
            client.exit("cannot delete or search parkpost")
        print(client.parkpost(xml))
    else:
        if xml:
            update = xml
            if args.process is not None:
                update = client.to_object_or_none(xml, validate=True)
                exec(args.process)
                client.logger.debug("Execed " + args.process)
            if not(type(update) == str) and xml.childNodes[0].namespaceURI == media_search.Namespace.uri():
                if args.delete:
                    client.exit("cannot delete with search")
                print(client.find(update, writable=args.writable, raw=args.raw, validate_input=args.validate))
            else:
                if args.delete:
                    mid = update.mid
                    print(client.delete(mid))
                else:
                    if update.childNodes[0].nodeName == "prediction":
                        print(client.post(update, raw=args.raw, validate_input=args.validate))
                    else :
                        print(client.post(update, raw=args.raw, validate_input=args.validate))
        elif mid:
            if args.delete:
                print(client.delete(mid))
            else:
                print(client.get(mid))

client.exit()
